/**
 * DialogProcessor.java
 */

package draw.Processors;

import java.awt.*;
import java.awt.geom.AffineTransform;

import javax.swing.JColorChooser;
import javax.swing.JFrame;

import draw.Utils.DimentionUtils;
import draw.Utils.ShapeBorderSize;

/**
 * Класът, който ще бъде използван при управляване на диалога.
 */
public class DialogProcessor extends DisplayProcessor {
	/**
	 * Избран елемент.
	 */
	private draw.Model.Shape selection;
	
	private Point startPoint;
	private Point endPoint;

	// Не е необходим в реализацията на Java
	/// **
	// * Дали в момента диалога е в състояние на "влачене" на избрания елемент.
	// */
	// private boolean isDragging;

	/**
	 * Последна позиция на мишката при "влачене". Използва се за определяне на
	 * вектора на транслация.
	 */
	private Point lastLocation;

	public DialogProcessor() {
	}

	/**
	 * Добавя примитив - правоъгълник на произволно място върху клиентската област.
	 */
	public void AddRandomRectangle(boolean isFinishDrawing) {
		int[] values = DimentionUtils.findShapeBetweenTwoPoints(this.startPoint, this.endPoint);
		draw.Model.RectangleShape rect = new draw.Model.RectangleShape(new Rectangle(values[0], values[1], values[4], values[5]));
		rect.setFinishDrawing(isFinishDrawing);
		rect.setFillColor(java.awt.Color.WHITE);
		rect.setBorderColor(java.awt.Color.BLUE);
		shapeList.add(rect);
	}

	 /**
     * Добавя примитив - правоъгълник на произволно място върху клиентската област.
     */
    public void AddRandomRectangle() {
        int x = 100 + (int)Math.round(Math.random()*900);
        int y = 100 + (int)Math.round(Math.random()*500);
        draw.Model.RectangleShape rect = new draw.Model.RectangleShape(new Rectangle(x,y,100,200));
        rect.setFillColor(java.awt.Color.WHITE);
        shapeList.add(rect);
    }

	/**
	 * Добавя примитив - елипса на произволно място върху клиентската област.
	 */
	public void AddRandomEllipse(boolean isFinishDrawing) {
//		int x = 100 + (int) Math.round(Math.random() * 900);
//		int y = 100 + (int) Math.round(Math.random() * 500);
		int[] values = DimentionUtils.findShapeBetweenTwoPoints(this.startPoint, this.endPoint);
		draw.Model.EllipseShape rect = new draw.Model.EllipseShape(new Rectangle(values[0], values[1], values[4], values[5]));
		rect.setFinishDrawing(isFinishDrawing);
		rect.setFillColor(java.awt.Color.WHITE);
		rect.setBorderColor(java.awt.Color.BLUE);
		shapeList.add(rect);
	}

	/**
	 * Добавя примитив - квадрат на произволно място върху клиентската област.
	 */
	public void AddRandomSquare(boolean isFinishDrawing) {
//		int x = 100 + (int) Math.round(Math.random() * 900);
//		int y = 100 + (int) Math.round(Math.random() * 500);
		int[] values = DimentionUtils.findShapeBetweenTwoPoints(this.startPoint, this.endPoint);
		draw.Model.SquareShape rect = new draw.Model.SquareShape(new Rectangle(values[0], values[1], values[4], values[4]));
		rect.setFinishDrawing(isFinishDrawing);
		rect.setFillColor(java.awt.Color.WHITE);
		rect.setBorderColor(java.awt.Color.BLUE);
		shapeList.add(rect);
	}

	/**
	 * Добавя примитив - отсечка на произволно място върху клиентската област.
	 */
	public void AddRandomSegment(boolean isFinishDrawing) {
//		int x = 100 + (int) Math.round(Math.random() * 900);
//		int y = 100 + (int) Math.round(Math.random() * 500);
		int[] values = DimentionUtils.findShapeBetweenTwoPoints(this.startPoint, this.endPoint);
		draw.Model.SegmentShape rect = new draw.Model.SegmentShape(new Rectangle(values[0], values[1], values[2], values[3]));
		rect.setFinishDrawing(isFinishDrawing);
//        rect.setFillColor(java.awt.Color.WHITE);
		shapeList.add(rect);
	}

	/**
	 * Добавя примитив - трапец на произволно място върху клиентската област.
	 */
	public void AddRandomPolygon(boolean isFinishDrawing) {
		int[] values = DimentionUtils.findShapeBetweenTwoPoints(this.startPoint, this.endPoint);
		Point point1 = new Point();
		point1.x = values[0];
		point1.y = values[3];
		Point point2 = new Point();
		point2.x = values[0];
		point2.y = values[1];
		Point point3 = new Point();
		point3.x = values[2];
		point3.y = values[1];
		draw.Model.TriangleShape rect = new draw.Model.TriangleShape(new Rectangle(0, 0, 100, 100), point1, point2, point3);
		rect.setFinishDrawing(isFinishDrawing);
		rect.setFillColor(java.awt.Color.WHITE);
		rect.setBorderColor(java.awt.Color.BLUE);
		shapeList.add(rect);
	}

	public void borderColorSelection(JFrame frame) {
		Color recentColor = Color.BLACK;
		Color color = JColorChooser.showDialog(frame, "Select a color", recentColor);
		this.setBorderColor(color);
	}

	public void fillColorSelection(JFrame frame) {
		Color recentColor = Color.BLACK;
		Color color = JColorChooser.showDialog(frame, "Select a color", recentColor);
		this.setFillColor(color);
	}

	public void borderSizeSelection(int thickness) {
		ShapeBorderSize border = new ShapeBorderSize(new Insets(thickness, thickness, thickness, thickness));
		this.setBorderSize(border);
	}

	/**
	 * Проверява дали дадена точка е в елемента. Обхожда в ред обратен на
	 * визуализацията с цел намиране на "най-горния" елемент т.е. този който виждаме
	 * под мишката.
	 * 
	 * @param point - Указана точка.
	 * @return Елемента на изображението, на който принадлежи дадената точка.
	 */
	public draw.Model.Shape ContainsPoint(Point point) {
		for (int i = shapeList.size() - 1; i >= 0; i--) {
			if (shapeList.get(i).Contains(point)) {
				shapeList.get(i).setFillColor(Color.RED);
				return shapeList.get(i);
			}
		}
		return null;
	}

	/**
	 * Транслация на избраният елемент на вектор определен от <paramref name="p>p<
	 * paramref>
	 * 
	 * @param p - Вектор на транслация.
	 */
	public void TranslateTo(Point p) {
		if (selection != null) {
//			selection.moveTranslateTo(p, this.lastLocation);
			selection.setLocation(new Point(selection.getLocation().x + p.x - lastLocation.x,
					selection.getLocation().y + p.y - lastLocation.y));
			lastLocation = p;
		}
	}
	//

	public draw.Model.Shape getSelection() {
		return selection;
	}

	public void setSelection(draw.Model.Shape value) {
		selection = value;
	}

	public void setBorderColor(Color color) {
		selection.setBorderColor(color);
	}

	public void setFillColor(Color color) {
		selection.setFillColor(color);
	}

	public void setBorderSize(ShapeBorderSize shapeBorderSize) {
		selection.setBorderSize(shapeBorderSize);
	}

	// public boolean getIsDragging() {
	// return isDragging;
	// }

	// public void setIsDragging(boolean value) {
	// isDragging = value;
	// }

	public Point getLastLocation() {
		return lastLocation;
	}

	public void setLastLocation(Point value) {
		lastLocation = value;
	}
	
	public Point getStartPoint() {
		return startPoint;
	}
	
	public void setStartPoint(Point newStartPoint) {
		startPoint = newStartPoint;
	}

	public Point getEndPoint() {
		return endPoint;
	}
	
	public void setEndPoint(Point newEndPoint) {
		endPoint = newEndPoint;
	}
	
	//public void rotate() {
	
//		  p1.setLocation(p1.getX() * Math.cos(Math.toRadians(90)) - p1.getY() * Math.sin(Math.toRadians(90)),
//	                p1.getX() * Math.sin(Math.toRadians(90)) + p1.getY() * Math.cos(Math.toRadians(90)));
//	        p2.setLocation(p2.getX() * Math.cos(Math.toRadians(90)) - p2.getY() * Math.sin(Math.toRadians(90)),
//	                p2.getX() * Math.sin(Math.toRadians(90)) + p2.getY() * Math.cos(Math.toRadians(90)));
//	        p3.setLocation(p3.getX() * Math.cos(Math.toRadians(90)) - p3.getY() * Math.sin(Math.toRadians(90)),
//	                p3.getX() * Math.sin(Math.toRadians(90)) + p3.getY() * Math.cos(Math.toRadians(90)));
//	        p4.setLocation(p4.getX() * Math.cos(Math.toRadians(90)) - p4.getY() * Math.sin(Math.toRadians(90)),
//	                p4.getX() * Math.sin(Math.toRadians(90)) + p4.getY() * Math.cos(Math.toRadians(90)));
	//}
	
	 
    public void rotate() {

//        Graphics2D g2d = (Graphics2D) g.create();

//        g2d.setColor(new Color(150, 150, 150));
//        g2d.fillRect(20, 20, 80, 50);
//
//        AffineTransform tx1 = new AffineTransform();
//        tx1.translate(110, 22);
//        tx1.scale(0.5, 0.5);
//
//        g2d.setTransform(tx1);
//        g2d.fillRect(0, 0, 80, 50);

//        Graphics2D g2d = scaled.createGraphics();
//        g2d.setTransform(AffineTransform.getScaleInstance(0.5d, 0.5d));
//        AffineTransform tx2 = new AffineTransform();
//        tx2.translate(170, 20);
//        tx2.scale(1.5, 1.5);
//
//        g2d.setTransform(tx2);
//        g2d.fillRect(0, 0, 80, 50);
        
//        g2d.dispose();
        
        double angle = 45.0d;

        double rads = Math.toRadians(angle);
        double sin = Math.abs(Math.sin(rads));
        double cos = Math.abs(Math.cos(rads));
        
        int w = this.selection.getWidth();
        int h = this.selection.getHeight();
        int newWidth = (int) Math.floor(w * cos + h * sin);
        int newHeight = (int) Math.floor(h * cos + w * sin);
//        
//        Graphics2D g2d = (Graphics2D) g.create();
        AffineTransform at = new AffineTransform();
//        ---------------------------
        at.translate((newWidth - w) / 2, (newHeight - h) / 2);

        int x = w / 2; 
        int y = h / 2;

        at.rotate(rads, x, y);
//        ---------------------
//        at.translate(100, 40);
//        at.quadrantRotate(1, w / 2, h / 2);
        selection.setTransformMatrix(at);
//--------------------
//        g2d.setTransform(at);
        
//        g2d.drawImage(img, 0, 0, this);
//        g2d.setColor(Color.RED);
//        g2d.drawRect(0, 0, newWidth - 1, newHeight - 1);
        
//        g2d.dispose();

//        repaint();

    }
	
}
